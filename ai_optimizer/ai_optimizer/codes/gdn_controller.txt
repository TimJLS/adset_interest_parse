
import datetime
import gdn_db
from googleads import adwords
import pandas as pd
import copy
import math
AUTH_FILE_PATH = '/home/tim_su/ai_optimizer/opt/ai_optimizer/googleads.yaml'
adwords_client = adwords.AdWordsClient.LoadFromStorage(AUTH_FILE_PATH)

class CampaignService(object):
    selector= [{
        'fields': None,
        'predicates': [{
            'field': 'CampaignId',
            'operator': 'EQUALS',
            'values':[None]
        }]
    }]
    def __init__(self, customer_id):
        self.customer_id = customer_id
        adwords_client.SetClientCustomerId(self.customer_id)
        self.campaign_service = self.adwords_client.GetService('CampaignService', version='v201809')

class AdGroupService(object):
    selector= [{
        'fields': None,
        'predicates': [{
            'field': 'AdGroupId',
            'operator': 'EQUALS',
            'values':[None]
        }]
    }]

    def __init__(self, customer_id):
        self.customer_id = customer_id
        adwords_client.SetClientCustomerId(self.customer_id)
        self.service = adwords_client.GetService('AdGroupService', version='v201809')
        self.criterion_service = adwords_client.GetService('AdGroupCriterionService', version='v201809')
        self.ad_service = adwords_client.GetService('AdGroupAdService', version='v201809')
#         self.ad_group = self.create_ad_group()
        
    def AdGroup(self, ad_group_id):
        return AdGroupService.AdGroup(self,)

    class AdGroup(object):
        def __init__(self, AdGroupService, ad_group_id):
            self.params = self.create_params()
            self.criterions = self.create_criterions()
    
        def create_params(self,):
            return AdGroupService.AdGroup.Params(self)

        def create_criterions(self,):
            return AdGroupService.AdGroup.Criterions(self)

        class Params(object):
            fields = [
                'CampaignId', 'AdGroupId', 'Name', 'CpcBid', 'BiddingStrategyId','BiddingStrategyName',
                'BiddingStrategySource', 'BiddingStrategyType'
            ]
            def __init__(self, AdGroup):
                self.ad_group = AdGroup
                
            def retrieve(self,):
                self.ad_group_service.selector[0]['fields'] = self.fields
                self.ad_group_service.selector[0]['predicates'][0]['values'][0] = self.ad_group.ad_group_id
                ad_group_params = self.ad_group.ad_group_service.service.get(self.ad_group_service.selector)
                return ad_group_params

        class Criterions(object):
            fields = [
                'AdGroupId', 'CriteriaType', 'UserInterestId', 'UserInterestName', 'UserListId', 'VerticalId', 'LabelIds',
                'BiddingStrategyType', 'BiddingStrategySource', 'BiddingStrategyId',
            ]
            def __init__(self, AdGroup):
                self.ad_group = AdGroup
                self.basic = self.create_basic()
                self.user_interest = self.create_user_interest()
                self.user_list = self.create_user_list()

            def create_basic(self,):
                return AdGroupService.AdGroup.Criterions.Basic(self)

            def create_user_interest(self,):
                return AdGroupService.AdGroup.Criterions.UserInterest(self)

            def create_user_list(self,):
                return AdGroupService.AdGroup.Criterions.UserList(self)

            def retrieve(self,):
                self.ad_group.ad_group_service.selector[0]['fields'] = self.fields
                self.ad_group.ad_group_service.selector[0]['predicates'][0]['values'][0] = self.ad_group.ad_group_id
                ad_group_criterions = self.ad_group.ad_group_service.criterion_service.get(self.ad_group.ad_group_service.selector)
                return ad_group_criterions

            class Basic(object):
                def __init__(self, Criterions):
                    self.criterions = Criterions

                def retrieve(self,):
                    entries = self.criterions.retrieve()['entries']
                    biddable_criterions = [ entry["criterion"] for i, entry in enumerate(entries) if entry['criterion']['type']=='AGE_RANGE' and entry["AdGroupCriterion.Type"]== 'BiddableAdGroupCriterion']
                    negative_criterions = [ entry["criterion"] for i, entry in enumerate(entries) if entry['criterion']['type']=='AGE_RANGE' and entry["AdGroupCriterion.Type"]== 'NegativeAdGroupCriterion']
                    return biddable_criterions, negative_criterions

            class UserInterest(object):
                def __init__(self, Criterions):
                    self.criterions = Criterions

                def retrieve(self,):
                    entries = self.criterions.retrieve()['entries']
                    biddable_criterions = [ entry["criterion"] for i, entry in enumerate(entries) if entry['criterion']['type']=='USER_INTEREST' and entry["AdGroupCriterion.Type"]== 'BiddableAdGroupCriterion']
                    negative_criterions = [ entry["criterion"] for i, entry in enumerate(entries) if entry['criterion']['type']=='USER_INTEREST' and entry["AdGroupCriterion.Type"]== 'NegativeAdGroupCriterion']
                    return biddable_criterions, negative_criterions

            class UserList(object):
                def __init__(self, Criterions):
                    self.criterions = Criterions

                def retrieve(self,):
                    entries = self.criterions.retrieve()['entries']
                    biddable_criterions = [ entry["criterion"] for i, entry in enumerate(entries) if entry['criterion']['type']=='USER_LIST' and entry["AdGroupCriterion.Type"]== 'BiddableAdGroupCriterion']
                    negative_criterions = [ entry["criterion"] for i, entry in enumerate(entries) if entry['criterion']['type']=='USER_LIST' and entry["AdGroupCriterion.Type"]== 'NegativeAdGroupCriterion']
                    return biddable_criterions, negative_criterions

group_service = AdGroupService(customer_id=6714857152)
ad_group = group_service.AdGroup(ad_group_id=78188491594)

group_service.criterions.user_list.retrieve()

class CriterionService(object):
    
    def __init__(self, customer_id):
        self.customer_id = customer_id
        self.ad_group_criterion_service = self.adwords_client.GetService('AdGroupCriterionService', version='v201809')
        service = self.adwords_client.GetService('CampaignCriterionService', version='v201809')
        
    class UserInterest(object):
        def __init__(self,):
            return
    
    
    class UserList(object):
        def __init__(self,):
            return


